grammar gram;

SEMI : ';';
WHILE : 'while';
PRINT : 'print';
OPEN : 'open';
INPUT : 'input';
READ : 'read';
WRITE : 'write';
CLOSE : 'close';
LP : [(];
RP : [)];
EQ : [=];
CMA : [,];
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : [{];
RBR : [}];
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][\-+]?[0-9]+)?|'-'?[0-9]+[Ee][\-+]?[0-9]+;
NUM : [0-9]+;
OR : 'or';
AND : 'and';
NOT : 'not';
STRING : '[^"]*';
STRINGCONST : '"' ( '\\"' | ~["] )* '"' ;
PLUS : [+];
MULOP : [*/%];
MINUS : [-];
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
TYPE : ('int'|'string'|'double');
COMMENT :('//'~[\n]* |'/*' .*? '*/') -> skip;
WHITESPACE : [ \t\r\n]+ -> skip;
ID : [A-Za-z_]([A-Za-z0-9_]*);

program : varDeclList braceblock EOF;
varDeclList : varDecl SEMI varDeclList |  ;
varDecl : TYPE ID pVarDecl | TYPE assign;
pVarDecl : CMA ID pVarDecl | ;
stmts : stmt stmts | ;
rel : sum RELOP sum | sum;
sum :  sum PLUS term | sum MINUS term | term;
term :  term MULOP neg | neg;
stmt : funcCall SEMI| cond | loop | returnStmt SEMI | assign SEMI;
assign : ID EQ expr;
neg :  MINUS neg | factor;
factor : NUM | FPNUM | LP expr RP | LP TYPE RP factor | STRINGCONST | ID | funcCall;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
expr : orexp;
orexp : orexp OR andexp | andexp;
andexp : andexp AND notexp | notexp;
notexp : NOT notexp | rel;
funcCall : builtinFuncCall;
builtinFuncCall : PRINT LP expr RP | INPUT LP RP | OPEN LP expr RP | READ LP expr RP | WRITE LP expr CMA expr RP | CLOSE LP expr RP;
returnStmt : RETURN expr;
