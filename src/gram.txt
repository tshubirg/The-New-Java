grammar gram;

SEMI : ';';
WHILE : 'while';
LP : [(];
RP : [)];
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : [{];
RBR : [}];
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][\-+]?[0-9]+)?|'-'?[0-9]+[Ee][\-+]?[0-9]+;
NUM : [0-9]+;
OR : 'or';
AND : 'and';
NOT : 'not';
STRING : '[^"]*';
PLUS : [+];
MULOP : [*/%];
MINUS : [-];
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
TYPE : ('int'|'string'|'double');
COMMENT : '/*' .*? '*/' -> skip;
WHITESPACE : [ \t\r\n]+ -> skip;

program : braceblock;
stmts : stmt stmts | ;
rel : sum RELOP sum | sum;
sum :  sum PLUS term | sum MINUS term | term;
term :  term MULOP neg | neg;
stmt : cond | loop | returnStmt SEMI;
neg :  MINUS neg | factor;
factor : NUM | FPNUM | LP expr RP | LP TYPE RP factor;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
expr : orexp;
orexp : orexp OR andexp | andexp;
andexp : andexp AND notexp | notexp;
notexp : NOT notexp | rel;
returnStmt : RETURN expr;
