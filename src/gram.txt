grammar gram;

COMMENT : '//'~[\n]* -> skip;
SEMI : ';';
WHILE : 'while';
LP : [(];
RP : [)];
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : [{];
RBR : [}];
FPNUM : ([\\d]+[\\.][\\d]*|[\\.][\\d]+)([Ee][-+]?[\\d]+)?|[-]?[\\d]+[Ee][-+]?[\\d]+;
NUM : '-'? [0-9]+;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
EQ : '=';
PLUS : [+];
MULOP : [*/%];
MINUS : '-';
CMA : ',';
TYPE : ('int'|'string'|'double');
STRINGCONSTANT : ["]([\\"]|[\\n]|[\\\\]|~["])*["];
PRINT : 'print';
INPUT : 'input';
OPEN : 'open';
READ : 'read';
WRITE : 'write';
CLOSE : 'close';
ID : [A-Za-z_]+;
WHITESPACE : ( ' ' | '\t' | '\n' | '\r' )+ -> skip   ;

program : braceblock;
stmts : stmt stmts | ;
stmt : cond | loop | returnStmt SEMI;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
expr : NUM;
returnStmt : RETURN expr;
